<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Programador de Perfiles para Torno CNC - Mecanizado Fácil</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: Arial, sans-serif; background: #f5f5f5; margin: 0; padding-bottom: 50px; }
        .container { max-width: 1100px; margin: 30px auto; background: #fff; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 24px; }
        h1, h2 { text-align: center; color: #2c3e50; }
        h2 { margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;}
        table { width: 100%; border-collapse: collapse; margin-bottom: 18px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
        th { background: #f2f2f2; }
        input, select { padding: 6px; border-radius: 4px; border: 1px solid #ccc; box-sizing: border-box; width: 100%; }
        td input[type="number"] { width: calc(100% - 12px); } /* Ajuste para padding */
        td select { width: calc(100% - 12px); }
        .actions { margin-bottom: 18px; text-align: center; }
        button { background: #3498db; color: #fff; border: none; padding: 10px 18px; border-radius: 4px; cursor: pointer; margin: 5px; }
        button:hover { background: #217dbb; }
        button.delete-btn { background: #e74c3c; }
        button.delete-btn:hover { background: #c0392b; }
        .code-block { background: #f8f9fa; padding: 15px; border-radius: 4px; border-left: 4px solid #3498db; overflow-x: auto; font-family: monospace; white-space: pre; margin-top: 20px; }
        #canvas { background: #f9f9f9; border: 1px solid #ccc; border-radius: 8px; margin-top: 20px; display: block; margin-left: auto; margin-right: auto; max-width: 100%; }
        .small-info { font-size: 0.9em; color: #777; margin-top: 5px; text-align: center; }
        .table-container { overflow-x: auto; } /* Para tablas anchas en móviles */
    </style>
</head>
<body>
<div class="container">
    <h1>Programador de Perfiles para Torno CNC</h1>
    
    <h2>Definición de Puntos del Perfil</h2>
    <div class="actions">
        <button onclick="addPoint()">Agregar Punto</button>
    </div>
    <div class="table-container">
        <table id="pointsTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>X (Diámetro, mm)</th>
                    <th>Z (Longitud, mm)</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                <!-- Filas de puntos dinámicas -->
            </tbody>
        </table>
    </div>

    <h2>Definición de Transiciones en Vértices</h2>
    <div class="small-info">Defina chaflanes o radios en los vértices formados por los puntos. Las transiciones solo aplican a puntos internos (no al primero ni al último).</div>
    <div class="table-container">
        <table id="transitionsTable">
            <thead>
                <tr>
                    <th>Vértice (Punto #)</th>
                    <th>Tipo de Transición</th>
                    <th>Valor</th>
                    <th>Tipo de Radio</th>
                </tr>
            </thead>
            <tbody>
                <!-- Filas de transiciones dinámicas -->
            </tbody>
        </table>
    </div>
    <div class="small-info">Para Chaflán, use "CxZ" (ej: "2x1.5") o "CValor" (ej: "C2" para 45°). Para Radio, ingrese el valor R.</div>


    <div class="actions" style="margin-top: 30px;">
        <button onclick="generateGCodeAndDraw()">Generar Código G y Gráfica</button>
    </div>
    
    <div class="code-block" id="gcodeOutput"></div>
    <canvas id="canvas" width="800" height="400"></canvas>
</div>

<script>
let points = [
    { id: Date.now() + '_0', x: 0, z: 0 },
    { id: Date.now() + '_1', x: 20, z: 0 },
    { id: Date.now() + '_2', x: 20, z: -30 },
    { id: Date.now() + '_3', x: 40, z: -30 },
    { id: Date.now() + '_4', x: 40, z: -50 }
];

let transitions = [];

function initializeTransitions() {
    transitions = points.map((p) => ({ // No se necesita el índice aquí si usamos p.id
        pointId: p.id,
        type: 'none', 
        value: '',    
        radiusType: 'convexo' 
    }));
    renderTransitionsTable();
}


function renderPointsTable() {
    const tbody = document.querySelector('#pointsTable tbody');
    tbody.innerHTML = '';
    points.forEach((point, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>P${index}</td>
            <td><input type="number" value="${point.x}" step="any" onchange="updatePoint(${index}, 'x', this.value)"></td>
            <td><input type="number" value="${point.z}" step="any" onchange="updatePoint(${index}, 'z', this.value)"></td>
            <td><button class="delete-btn" onclick="removePoint(${index})">Eliminar</button></td>
        `;
        tbody.appendChild(tr);
    });
    initializeTransitions(); 
}

function renderTransitionsTable() {
    const tbody = document.querySelector('#transitionsTable tbody');
    tbody.innerHTML = '';
    if (points.length < 3) {
        tbody.innerHTML = '<tr><td colspan="4">Se necesitan al menos 3 puntos para definir transiciones en vértices.</td></tr>';
        return;
    }

    points.forEach((point, index) => {
        if (index > 0 && index < points.length - 1) { // Solo puntos internos
            // Asegurarse de que la transición exista o crear una por defecto si no
            let transition = transitions.find(t => t.pointId === point.id);
            if (!transition) {
                transition = { pointId: point.id, type: 'none', value: '', radiusType: 'convexo' };
                // Opcionalmente, añadirla al array 'transitions' si se espera que siempre exista
                // transitions.push(transition); // Descomentar si es necesario
            }
            
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>Vértice en P${index} (X:${point.x}, Z:${point.z})</td>
                <td>
                    <select onchange="updateTransitionById('${point.id}', 'type', this.value)">
                        <option value="none" ${transition.type === 'none' ? 'selected' : ''}>Ninguna</option>
                        <option value="chamfer" ${transition.type === 'chamfer' ? 'selected' : ''}>Chaflán</option>
                        <option value="radius" ${transition.type === 'radius' ? 'selected' : ''}>Radio</option>
                    </select>
                </td>
                <td>
                    ${transition.type === 'chamfer' ? 
                        `<input type="text" value="${transition.value}" placeholder="Ej: 2x1.5 o C2" onchange="updateTransitionById('${point.id}', 'value', this.value)">` :
                    transition.type === 'radius' ? 
                        `<input type="number" value="${transition.value || ''}" step="any" placeholder="Valor R" onchange="updateTransitionById('${point.id}', 'value', this.value)">` : // Asegurar que value no sea undefined
                        '<span>N/A</span>'}
                </td>
                <td>
                    ${transition.type === 'radius' ? 
                        `<select onchange="updateTransitionById('${point.id}', 'radiusType', this.value)">
                            <option value="convexo" ${transition.radiusType === 'convexo' ? 'selected' : ''}>Convexo</option>
                            <option value="concavo" ${transition.radiusType === 'concavo' ? 'selected' : ''}>Cóncavo</option>
                        </select>` :
                        '<span>N/A</span>'}
                </td>
            `;
            tbody.appendChild(tr);
        }
    });
}

function updatePoint(index, key, value) {
    points[index][key] = parseFloat(value);
    // Actualizar las coordenadas del punto en la tabla de transiciones si es un vértice
    if (index > 0 && index < points.length - 1) {
        renderTransitionsTable(); 
    }
}

function addPoint() {
    const lastPoint = points[points.length - 1] || { x: 0, z: 0 };
    const newId = Date.now() + '_' + points.length;
    points.push({ 
        id: newId, 
        x: parseFloat(lastPoint.x) + 10, 
        z: parseFloat(lastPoint.z) - 10 
    });
    // No es necesario añadir explícitamente a 'transitions' aquí si initializeTransitions se llama después
    renderPointsTable(); 
}

function removePoint(index) {
    if (points.length <= 2) {
        alert("Se requieren al menos 2 puntos para definir un perfil.");
        return;
    }
    const removedPointId = points[index].id;
    points.splice(index, 1);
    transitions = transitions.filter(t => t.pointId !== removedPointId); // Eliminar transición asociada
    renderPointsTable(); 
}

function updateTransitionById(pointId, key, value) {
    let transition = transitions.find(t => t.pointId === pointId);
    if (!transition) { 
        // Esto no debería pasar si initializeTransitions se llama correctamente
        // y se maneja la adición/eliminación de puntos.
        // Pero como fallback, podemos crearla.
        transition = { pointId: pointId, type: 'none', value: '', radiusType: 'convexo' };
        transitions.push(transition);
    }
    
    // Determinar si el valor debe ser numérico (para radio)
    const isRadiusValue = key === 'value' && transition.type === 'radius';
    transition[key] = isRadiusValue ? (parseFloat(value) || '') : value;
    
    renderTransitionsTable();
}


function generateGCodeAndDraw() {
    const gcodeOutput = document.getElementById('gcodeOutput');
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (points.length < 2) {
        gcodeOutput.textContent = "Se necesitan al menos 2 puntos para generar el perfil.";
        return;
    }

    let gCode = "(PROFILE PROGRAM - Mecanizado Facil)\n";
    gCode += "G21 (METRIC)\nG90 (ABSOLUTE)\nG40 (CANCEL CUTTER COMP)\n"; 

    let pathForDrawing = []; 

    let currentX = points[0].x;
    let currentZ = points[0].z;
    gCode += `G00 X${currentX.toFixed(3)} Z${currentZ.toFixed(3)} (MOVE TO START POINT P0)\n`;
    pathForDrawing.push({ x: currentX, z: currentZ, label: 'P0' });

    for (let i = 0; i < points.length - 1; i++) {
        const p1 = points[i];      
        const p2 = points[i+1];    
        const p3 = (i + 2 < points.length) ? points[i+2] : null; 

        const transition = (i + 1 < points.length -1 && i + 1 > 0) ? // Solo transiciones en puntos internos que no son el penúltimo
                         transitions.find(t => t.pointId === p2.id) : 
                         { type: 'none' }; // No hay transición para el último segmento o si no es interno
        
        if (transition && transition.type !== 'none' && p3) { 
            if (transition.type === 'chamfer' && transition.value) {
                let cVal1, cVal2; // cVal1 para X (radial), cVal2 para Z
                const valStr = String(transition.value).toLowerCase();
                if (valStr.includes('x')) {
                    const parts = valStr.split('x');
                    // Asumir formato C ZxX o C XxZ. Si solo hay 'C', es 45 grados.
                    // Si es C2x1.5, cVal2 (Z) = 2, cVal1 (X) = 1.5
                    // Si es C1.5x2, cVal2 (Z) = 1.5, cVal1 (X) = 2
                    // Por ahora, simplificamos: el primer valor es Z, el segundo X si existe.
                    // O si es Cval, ambos son val.
                    if (parts.length === 2) {
                        cVal2 = parseFloat(parts[0].replace('c','')); // Z
                        cVal1 = parseFloat(parts[1]); // X
                    } else if (valStr.startsWith('c') && parts.length === 1) {
                         cVal1 = cVal2 = parseFloat(parts[0].replace('c',''));
                    } else { // Solo número
                        cVal1 = cVal2 = parseFloat(valStr);
                    }
                } else if (valStr.startsWith('c')) {
                    cVal1 = cVal2 = parseFloat(valStr.substring(1));
                } else {
                    cVal1 = cVal2 = parseFloat(valStr); 
                }

                if (isNaN(cVal1) || isNaN(cVal2) || cVal1 <=0 || cVal2 <=0) {
                    gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1} - INVALID CHAMFER)\n`;
                    pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                    currentX = p2.x; currentZ = p2.z;
                    continue;
                }
                
                let dx1_seg = p2.x - p1.x; let dz1_seg = p2.z - p1.z;
                let len1_seg = Math.sqrt(dx1_seg*dx1_seg + dz1_seg*dz1_seg);
                if (len1_seg === 0) { continue; }
                
                let dx2_seg = p3.x - p2.x; let dz2_seg = p3.z - p2.z;
                let len2_seg = Math.sqrt(dx2_seg*dx2_seg + dz2_seg*dz2_seg);
                if (len2_seg === 0) { continue; }

                // Punto de inicio del chaflán (retrocediendo desde p2 a lo largo de p1-p2)
                // El chaflán se define por sus proyecciones en X y Z desde el vértice teórico
                const chamferStartX = p2.x - (dx1_seg / len1_seg) * cVal1; // cVal1 es la proyección en X (radial)
                const chamferStartZ = p2.z - (dz1_seg / len1_seg) * cVal2; // cVal2 es la proyección en Z

                // Punto de fin del chaflán (avanzando desde p2 a lo largo de p2-p3)
                const chamferEndX = p2.x + (dx2_seg / len2_seg) * cVal1;
                const chamferEndZ = p2.z + (dz2_seg / len2_seg) * cVal2;
                
                // Validación simple de si el chaflán cabe
                if (Math.sqrt(cVal1*cVal1 + cVal2*cVal2) > len1_seg/2 || Math.sqrt(cVal1*cVal1 + cVal2*cVal2) > len2_seg/2) { // Muy simplificado
                     gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1} - CHAMFER MAY BE TOO LARGE)\n`;
                     pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                     currentX = p2.x; currentZ = p2.z;
                     continue;
                }

                gCode += `G01 X${chamferStartX.toFixed(3)} Z${chamferStartZ.toFixed(3)} (TO CHAMFER START FROM P${i})\n`;
                pathForDrawing.push({ x: chamferStartX, z: chamferStartZ, type: 'line' });
                gCode += `G01 X${chamferEndX.toFixed(3)} Z${chamferEndZ.toFixed(3)} (CHAMFER AT P${i+1} VERTEX AREA)\n`;
                pathForDrawing.push({ x: chamferEndX, z: chamferEndZ, type: 'line', label: `P${i+1} (Chamfer)` });
                
                currentX = chamferEndX; currentZ = chamferEndZ;

            } else if (transition.type === 'radius' && transition.value) {
                const R = parseFloat(transition.value);
                if (isNaN(R) || R <= 0) {
                    gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1} - INVALID RADIUS)\n`;
                    pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                    currentX = p2.x; currentZ = p2.z;
                    continue;
                }

                const [x_prev, z_prev] = [p1.x, p1.z];
                const [x_vert, z_vert] = [p2.x, p2.z];
                const [x_next, z_next] = [p3.x, p3.z];

                const v_prev_vert_x = x_prev - x_vert; const v_prev_vert_z = z_prev - z_vert;
                const v_next_vert_x = x_next - x_vert; const v_next_vert_z = z_next - z_vert;
                const len_prev_vert = Math.sqrt(v_prev_vert_x*v_prev_vert_x + v_prev_vert_z*v_prev_vert_z);
                const len_next_vert = Math.sqrt(v_next_vert_x*v_next_vert_x + v_next_vert_z*v_next_vert_z);

                if (len_prev_vert === 0 || len_next_vert === 0) continue; 

                const dot_prod = v_prev_vert_x * v_next_vert_x + v_prev_vert_z * v_next_vert_z;
                let angle_at_vertex = Math.acos(dot_prod / (len_prev_vert * len_next_vert)); 

                if (Math.abs(angle_at_vertex) < 1e-6 || Math.abs(angle_at_vertex - Math.PI) < 1e-6) { 
                    gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1} - COLLINEAR FOR RADIUS)\n`;
                    pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                    currentX = p2.x; currentZ = p2.z;
                    continue;
                }
                
                const tangent_dist = R / Math.tan(angle_at_vertex / 2);

                if (tangent_dist > len_prev_vert || tangent_dist > len_next_vert) {
                    gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1} - RADIUS TOO LARGE)\n`;
                    pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                    currentX = p2.x; currentZ = p2.z;
                    continue;
                }

                const t1x = x_vert + (v_prev_vert_x / len_prev_vert) * tangent_dist;
                const t1z = z_vert + (v_prev_vert_z / len_prev_vert) * tangent_dist;
                const t2x = x_vert + (v_next_vert_x / len_next_vert) * tangent_dist;
                const t2z = z_vert + (v_next_vert_z / len_next_vert) * tangent_dist;

                gCode += `G01 X${t1x.toFixed(3)} Z${t1z.toFixed(3)} (TO RADIUS START FROM P${i})\n`;
                pathForDrawing.push({ x: t1x, z: t1z, type: 'line' });

                const cross_product_z_val = (z_vert - z_prev) * (x_next - x_vert) - (x_vert - x_prev) * (z_next - z_vert);
                let arcDirection = '';
                if (cross_product_z_val > 0) { 
                    arcDirection = (transition.radiusType === 'convexo') ? 'G03' : 'G02';
                } else { 
                    arcDirection = (transition.radiusType === 'convexo') ? 'G02' : 'G03';
                }
                
                gCode += `${arcDirection} X${t2x.toFixed(3)} Z${t2z.toFixed(3)} R${R.toFixed(3)} (RADIUS AT P${i+1} VERTEX)\n`;
                pathForDrawing.push({ x: t2x, z: t2z, type: 'arc', R: R, direction: arcDirection, prevX: t1x, prevZ: t1z, vertexX: p2.x, vertexZ: p2.z, label: `P${i+1} (Radius)` });
                
                currentX = t2x; currentZ = t2z;

            } else { 
                gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1})\n`;
                pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
                currentX = p2.x; currentZ = p2.z;
            }
        } else { 
            gCode += `G01 X${p2.x.toFixed(3)} Z${p2.z.toFixed(3)} (STRAIGHT TO P${i+1})\n`;
            pathForDrawing.push({ x: p2.x, z: p2.z, type: 'line', label: `P${i+1}` });
            currentX = p2.x; currentZ = p2.z;
        }
    }

    gCode += "M30 (PROGRAM END)\n";
    gcodeOutput.textContent = gCode;
    drawProfile(pathForDrawing, canvas, ctx);
}


function drawProfile(path, canvas, ctx) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (!path || path.length < 2) return;

    const allX = path.map(p => p.x);
    const allZ = path.map(p => p.z);

    let minX = Math.min(...allX);
    let maxX = Math.max(...allX);
    let minZ = Math.min(...allZ);
    let maxZ = Math.max(...allZ);

    const padding = 40; // Aumentado el padding para dar espacio a las etiquetas
    const graphWidth = canvas.width - 2 * padding;
    const graphHeight = canvas.height - 2 * padding;

    const rangeX = maxX - minX || 1; 
    const rangeZ = maxZ - minZ || 1;

    const scaleX = graphHeight / rangeX; 
    const scaleZ = graphWidth / rangeZ;  
    const scale = Math.min(scaleX, scaleZ) * 0.9; 

    const offsetX = padding - minZ * scale + (graphWidth - rangeZ * scale) / 2;
    const offsetY = canvas.height - padding + minX * scale - (graphHeight - rangeX * scale) / 2; 

    ctx.strokeStyle = "#3498db";
    ctx.lineWidth = 2;
    ctx.beginPath();

    path.forEach((p, index) => {
        const canvasX = offsetX + p.z * scale;
        const canvasY = offsetY - p.x * scale; 

        if (index === 0) {
            ctx.moveTo(canvasX, canvasY);
        } else {
            if (p.type === 'arc') {
                if (typeof p.vertexX !== 'undefined' && typeof p.vertexZ !== 'undefined') {
                    const controlPointCanvasX = offsetX + p.vertexZ * scale;
                    const controlPointCanvasY = offsetY - p.vertexX * scale;
                    ctx.arcTo(controlPointCanvasX, controlPointCanvasY, canvasX, canvasY, p.R * scale);
                } else {
                     ctx.lineTo(canvasX, canvasY); 
                }
            } else { 
                ctx.lineTo(canvasX, canvasY);
            }
        }
    });
    ctx.stroke();

    // Draw points and labels
    ctx.font = "10px Arial";    
    ctx.textAlign = "center";
    
    // Dibujar los puntos originales (los que el usuario ingresó en la tabla `points`)
    // y sus etiquetas, ya que `pathForDrawing` puede tener puntos intermedios de chaflanes/radios.
    points.forEach((originalPoint, index) => {
        const canvasX = offsetX + originalPoint.z * scale;
        const canvasY = offsetY - originalPoint.x * scale;
        
        // Dibujar el punto
        ctx.fillStyle = "#e74c3c"; 
        ctx.beginPath();
        ctx.arc(canvasX, canvasY, 3.5, 0, 2 * Math.PI); // Punto un poco más grande
        ctx.fill();

        // Dibujar etiqueta del punto
        ctx.fillStyle = "#2c3e50"; 
        let labelOffsetX = 0;
        let labelOffsetY = -10; // Por defecto arriba del punto

        // Ajustes simples para la posición de la etiqueta
        if (index === 0) { // Primer punto
            labelOffsetY = 15; // Abajo
        } else if (index === points.length - 1) { // Último punto
             labelOffsetY = 15; // Abajo
        }
        // Podrías añadir más lógica para evitar superposiciones si es necesario
        
        ctx.fillText(`P${index}`, canvasX + labelOffsetX, canvasY + labelOffsetY);
    });
}


// Initial render
renderPointsTable(); 

</script>
</body>
</html>
